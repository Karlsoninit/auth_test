{"version":3,"sources":["fbConfig.js","pages/Home.js","pages/Register.js","router.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Home","useState","hasEntered","setHasEntered","useEffect","a","async","db","firestore","collection","get","onClick","auth","signOut","SignOut","history","sendConfirm","setSendConfirm","handleSubmit","useCallback","event","preventDefault","email","target","elements","sendSignInLinkToEmail","value","url","handleCodeInApp","localStorage","setItem","console","log","isSignInWithEmailLink","location","search","getItem","signInWithEmailLink","removeItem","confirmInWithLink","onSubmit","type","name","useRouter","isAuthentication","path","exact","component","to","App","currentUser","setCurrentUser","app","onAuthStateChanged","routing","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAaAA,gBATe,CACbC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,8CAKMP,QCZFQ,EAAO,WAAO,IAAD,EACYC,oBAAS,GADrB,mBACjBC,EADiB,KACLC,EADK,KAaxB,OAHAC,qBAAU,WAPsB,EAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACxBE,EACHC,YACAC,WAAW,UACXC,OAJ2B,OAK9BP,GAAc,GALgB,uCAS7B,IAED,oCACE,oCACCD,GAAc,4EACf,4BAAQS,QAAS,kBAAMJ,EAAGK,OAAOC,YAAjC,cClBOC,EAAU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACAd,oBAAS,GADT,mBAC/Be,EAD+B,KAClBC,EADkB,KAGhCC,EAAeC,uBAAY,SAAMC,GAAN,eAAAf,EAAAC,OAAA,uDAC/Bc,EAAMC,iBACEC,EAAUF,EAAMG,OAAOC,SAAvBF,MAFuB,WAAAjB,EAAA,MAGzBE,EAAGK,OAAOa,sBAAsBH,EAAMI,MAAO,CACjDC,IAAK,gCACLC,iBAAiB,KALY,OAO/BX,GAAe,GAEfY,aAAaC,QAAQ,iBAAkBR,EAAMI,OATd,uCAU9B,IAEHK,QAAQC,IACN,6BACAzB,EAAGK,OAAOqB,sBAAsBlB,EAAQmB,SAASC,SAGnDJ,QAAQC,IAAI,wCAAyCjB,GAmBrD,OAJAX,qBAAU,YAbgB,mBAAAC,EAAAC,OAAA,oDACpBC,EAAGK,OAAOqB,sBAAsBlB,EAAQmB,SAASC,QAD7B,uBAEhBb,EAAQO,aAAaO,QAAQ,kBACnCL,QAAQC,IACN,yDACAjB,EAAQmB,SAASC,QALG,WAAA9B,EAAA,MAOhBE,EAAGK,OAAOyB,oBAAoBf,EAAOP,EAAQmB,SAASC,SAPtC,OAQtBN,aAAaS,WAAW,kBACxBP,QAAQC,IAAI,QAASjB,EAAQmB,SAASC,QAThB,qCAcxBI,KACC,IAGD,oCACE,0BAAMC,SAAUtB,GACd,2BAAOuB,KAAK,QAAQC,KAAK,UACzB,4BAAQD,KAAK,UAAb,aAEDzB,GACC,qEAEGa,aAAaO,QAAQ,qBC9CnBO,EAAY,SAAAC,GACvB,OAAKA,EASH,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW/C,IACjC,kBAAC,IAAD,CAAUgD,GAAG,OATb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOH,KAAK,YAAYE,UAAWjC,IACnC,kBAAC,IAAD,CAAUkC,GAAG,gBCKNC,MAVf,WAAgB,IAAD,EACyBhD,mBAAS,MADlC,mBACNiD,EADM,KACOC,EADP,KAEb/C,qBAAU,WACRgD,EAAIxC,OAAOyC,mBAAmBF,KAC7B,CAACD,IACJnB,QAAQC,IAAIkB,GACZ,IAAMI,EAAUX,EAAUO,GAC1B,OAAO,kBAAC,IAAD,KAASI,ICAEC,QACW,cAA7BC,OAAOtB,SAASuB,UAEe,UAA7BD,OAAOtB,SAASuB,UAEhBD,OAAOtB,SAASuB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.efdc94f6.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst config = {\n  apiKey: \"AIzaSyDrgILcTg4U4_Va7nYPGVqi_Iv3BnBGjE4\",\n  authDomain: \"authorization-3e689.firebaseapp.com\",\n  databaseURL: \"https://authorization-3e689.firebaseio.com\",\n  projectId: \"authorization-3e689\",\n  storageBucket: \"authorization-3e689.appspot.com\",\n  messagingSenderId: \"820706513856\",\n  appId: \"1:820706513856:web:1af7ebfaa57ab0025e2e25\"\n};\nfirebase.initializeApp(config);\n// firebase.firestore().settings({ timestampsInSnapshots: true });\n\nexport default firebase;\n","import React, { useEffect, useState } from \"react\";\n\nimport db from \"../fbConfig\";\n\nexport const Home = () => {\n  const [hasEntered, setHasEntered] = useState(false);\n\n  const getAllUsersInCollection = async () => {\n    await db\n      .firestore()\n      .collection(\"guides\")\n      .get();\n    setHasEntered(true);\n  };\n  useEffect(() => {\n    getAllUsersInCollection();\n  }, []);\n  return (\n    <>\n      <h2>home</h2>\n      {hasEntered && <h2>greate !!! you can registration with link :)</h2>}\n      <button onClick={() => db.auth().signOut()}>Sign out</button>\n    </>\n  );\n};\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport db from \"../fbConfig\";\n\nexport const SignOut = ({ history }) => {\n  const [sendConfirm, setSendConfirm] = useState(false);\n\n  const handleSubmit = useCallback(async event => {\n    event.preventDefault();\n    const { email } = event.target.elements;\n    await db.auth().sendSignInLinkToEmail(email.value, {\n      url: \"https://karlsoninit.github.io\",\n      handleCodeInApp: true\n    });\n    setSendConfirm(true);\n\n    localStorage.setItem(\"emailForSignIn\", email.value);\n  }, []);\n\n  console.log(\n    \"test isSignInWithEmailLink\",\n    db.auth().isSignInWithEmailLink(history.location.search)\n  );\n\n  console.log(\"test history.location.search outside:\", history);\n\n  const confirmInWithLink = async () => {\n    if (db.auth().isSignInWithEmailLink(history.location.search)) {\n      const email = localStorage.getItem(\"emailForSignIn\");\n      console.log(\n        \"test history.location.search inner confirmInWithLink :\",\n        history.location.search\n      );\n      await db.auth().signInWithEmailLink(email, history.location.search);\n      localStorage.removeItem(\"emailForSignIn\");\n      console.log(\"story\", history.location.search);\n    }\n  };\n\n  useEffect(() => {\n    confirmInWithLink();\n  }, []);\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input type=\"email\" name=\"email\" />\n        <button type=\"submit\">register</button>\n      </form>\n      {sendConfirm && (\n        <h2>\n          your confirm code you can find in your\n          {localStorage.getItem(\"emailForSignIn\")}\n        </h2>\n      )}\n    </>\n  );\n};\n","import { Switch, Route, Redirect } from \"react-router-dom\";\nimport React from \"react\";\nimport { Home } from \"./pages/Home\";\nimport { SignOut } from \"./pages/Register\";\n\nexport const useRouter = isAuthentication => {\n  if (!isAuthentication) {\n    return (\n      <Switch>\n        <Route path=\"/register\" component={SignOut} />\n        <Redirect to=\"/register\" />\n      </Switch>\n    );\n  }\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={Home} />\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport { useRouter } from \"./router\";\nimport app from \"./fbConfig\";\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState(null);\n  useEffect(() => {\n    app.auth().onAuthStateChanged(setCurrentUser);\n  }, [currentUser]);\n  console.log(currentUser);\n  const routing = useRouter(currentUser);\n  return <Router>{routing}</Router>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}